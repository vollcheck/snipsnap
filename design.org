#+TITLE: notes on snipsnap database/routes design

* MODELS
** users
   - id - id (auto)
   - username - text
   - password - text
   - email - text
   - avatar - bytes (optional)
   - bio - text (optional, rich one?)

** language
   - id - id
   - name - text

** snaps
   - id - id
   - user_id - id - relation to user
   - title - text
   - content - text (rich one? https://prismjs.com/)
   - language_id - relation to language
   - create_date - date - auto set
   - update_date - date - auto set

* ROUTES
** AUTH
   - /login
   - /register - create user
   - /password-reset (optional)
   - /logout

** GENERAL
   - / - dashboard

** USER
	/<username> -
                    GET: user profile + list of recent snaps

                    POST:

** SNAP
	/<username>/<title> - specific snap - CRUD on snap entity
                              title would need to be slugify
                              not sure if useful if we have
                              a frontend
        /<username>/<id> - same as above (optional)

** NOTES & TIPS
  - for some reason =test/models/user_test.clj= works only from CLI using =clojure -Mtest=
  - =find-by-keys= - super useful!
    #+BEGIN_SRC clojure
      (sql/find-by-keys (db) :snap {:name "hard computations"})
    #+END_SRC

  - test requests like in https://www.youtube.com/watch?v=FcxO5VCPLi4&t=330s
    #+BEGIN_SRC clojure
      (ns auth.core-test
        (:require [auth.core :refer [app]]
                  [clojure.test :refer [deftest testing is]]))

      (deftest test-unauthorized
        (testing "users route should return unauthorized"
          (is (= (-> {:headers headers :request-method :get :uri "/api/users"}
                     app
                     read-body)
                 {:error "Unauthorized"}))))
    #+END_SRC

** authentication
  https://github.com/kelvin-mai/clj-auth/blob/clj-auth-snapshot/src/auth/utils.clj

** authorization
   #+BEGIN_SRC clojure
     (defn me
       [request]
       (let [payload (:identity request)
             user (db/get-user-by-payload payload)]
         (if (nil? user)
           {:status 404
            :body {:error "Invalid credentials"}}
           {:status 200
            :body {:user user
                   :token (create-token user)}})))
   #+END_SRC


** TASKS
   - [ ] make username unique in the user table
   - [X] authorization (look above!)
   - [X] authentication (make sure that you is you)
   - [ ] register controller
   - [ ] snap controller tests (requires auth)
   - [ ] user controller tests (requires auth)
   - [ ] get users by the date of creation - add this field at first
   - [ ] data validation? - to elaborate more on that
   - [X] snap model tests
   - [X] user model tests
   - [X] language model tests
   - [X] refactor sql queries with honeysql
   - [X] implement routes
   - [X] language model
   - [X] `create-date` and `update-date` auto inserting
   - [X] snap controller / crud
   - [X] ensure responses are wrapped as JSON in the middleware

** EXTRA TASKS (that might be useful in general framework)
   - [ ] unify models queries to one base function?
   - [ ] unify controllers over entity as well
   - [ ] make one abstract CRUD method for each entity
   - [ ] make ability to load db seed data dynamically (eg. from file)
   - [ ] replace `println` with logging here and there

* CLIENT ARCHITECTURE & DESIGN
  by client I mean so-called /front-end/

  - ui framework: https://reactjs.org/
  - css framework: https://milligram.io/


** FE tasks:
  - [ ] color of the background #11191F - make icon similar
  - [ ] component for snap view
