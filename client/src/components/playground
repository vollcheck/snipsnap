
function Favorite({ contact }) {
  const fetcher = useFetcher();
  // yes, this is a `let` for later
  let favorite = contact.favorite;
  if (fetcher.formData) {
    favorite = fetcher.formData.get("favorite") === "true";
  }

  return (
    <fetcher.Form method="post">
      <button
        name="favorite"
        value={favorite ? "false" : "true"}
        aria-label={favorite ? "Remove from favorites" : "Add to favorites"}
      >
        {favorite ? "★" : "☆"}
      </button>
    </fetcher.Form>
  );
}



<table role="grid">
      <tbody>
        <tr>
          <th>ID</th>
          <th>Name</th>
          <th>Content</th>
          <th>Author</th>
          <th>Language</th>
          <th>Last update</th>
        </tr>
        {snaps.map((snap, index) => (
          <tr key={index}>
            <td>{snap["snap/id"]}</td>
            <td>{snap["snap/name"]}</td>
            <td>
              <code>{snap["snap/content"]}</code>
            </td>
            <td>{snap["user/username"]}</td>
            <td>{snap["language/name"]}</td>
            <td>{snap["snap/update_date"]}</td>
          </tr>
        ))}
      </tbody>
    </table>

-- unused first iteration of snap component
const SnapApp = () => {
  const [message, setMessage] = useState("");
  const [snaps, setSnaps] = useState([]);

  useEffect(() => {
    (async () => {
      const response = await getHealthcheck();
      // console.log(response);
      setMessage(response);
    })();

    (async () => {
      // probably to be moved to other things
      const response = await listSnaps();
      console.log(response);
      setSnaps(response);
    })();
  }, []);

  return (
    <main className="container">
      <h1>Hello, world!</h1>
      <h3>{message}</h3>
      <SnapPreview snap={snaps[0]} />
      <SnapList snaps={snaps} />
    </main>
  );
};

-- search bar
    <div id="sidebar">
      <h1>Snipsnap</h1>
      <div>
        <Form id="search-form" role="search">
          <input
            id="q"
            className={searching ? "loading" : ""}
            aria-label="Search snaps"
            placeholder="Search"
            type="search"
            name="q"
            defaultValue={q}
            onChange={(event) => {
              const isFirstSearch = q == null;
              submit(event.currentTarget.form, {
                replace: !isFirstSearch,
              });
            }}
          />
          <div id="search-spinner" aria-hidden hidden={!searching} />
          <div className="sr-only" aria-live="polite"></div>
        </Form>
        <Form method="post">
          <button type="submit">New</button>
        </Form>
      </div>

      <div
        id="detail"
        className={navigation.state === "loading" ? "loading" : ""}
      >
        <Outlet />
      </div>


-- snap edit/delete

// return (
  //   <div id="snap">
  //     <div>
  //       <Form action="edit">
  //         <button type="submit">Edit</button>
  //       </Form>
  //       <Form
  //         method="post"
  //         action="destroy"
  //         onSubmit={(event) => {
  //           if (
  //             !window.confirm("Please confirm you want to delete this record.")
  //           ) {
  //             event.preventDefault();
  //           }
  //         }}
  //       >
  //         <button type="submit">Delete</button>
  //       </Form>
  //     </div>

  //     <div>
  //       <h2>
  //         {snap["user/username"] || snap["snap/name"] ? (
  //           <>
  //             {snap["user/username"]} / {snap["snap/name"]}
  //           </>
  //         ) : (
  //           <i>No Name</i>
  //         )}{" "}
  //       </h2>

  //       {snap["language/name"] && <p>Language: {snap["language/name"]}</p>}

  //       {snap["snap/create_date"] && <p>Created: {snap["snap/create_date"]}</p>}

  //       {snap["snap/update_date"] && <p>Updated: {snap["snap/update_date"]}</p>}

  //       {snap["snap/content"] && <code>{snap["snap/content"]}</code>}
  //     </div>
  //   </div>
  // );
